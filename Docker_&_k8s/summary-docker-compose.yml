version: "3.9"
services:
    webapp:
        image: webapp:tag # image will be pulled beforehand build is triggered!
        build:
            context: ./dir
            dockerfile: Dockerfile-alternate
            labels:
                com.example.maintainer: "kondakcisabit@gmail.com Sabit Kondakci"
                com.example.department: "Agile Team, @GloryMountains"
                com.example.empty.label: ""
            args:
                buildno: 1
                user: sabitk
            shm_size: '2gb' # shared memory size in /dev/shm in BUILDING! 64MB by default

        image: image-alternate # image name obtained from "build" command above.
        container_name: webfire # don't name a container, if you'll have multiple of it.
        command: ["/bin/bash"] # command: ls -la /data
        shm_size: '3gb' # shared memory size in RUNNING container! 

        ports: 
            - "80:443"
        environment:
            - CPP_COMPILER=/bin/g++
        volumes:
            - linux_storage:/data

    volumes:
        linux_storage:
            driver: local

    # build: ./dir --> ./dir contains dockerfile
    # image: webapp:tag --> this results in an image 
    # named "webapp" and tagged "tag" built from ./dir dockerfile
    #
    # NOTE
    # Swarm stack compose file doesn't support "build: ." command!

    # context
    # Either a path to a directory containing a Dockerfile, or an url
    # to a git repository
    #
    # This directory is also the build context that is sent to the Docker deamon


    # dockerfile
    # Alternate Dockerfile
    # Compose uses and laternate file to build with. WORKDIR is context which is ./dir in this example

    # args
    # Add build arguments, which are environment variables accessible only during the build process.
    # ARG buildno
    # ARG gitcommitbash
    #
    # RUN echo "Build number: $buildno"
    # RUN echo "Based on commit: $gitcommitbash"
    #
    # docker-compose.yml:
    # build:
    #   context: ./dir
    #   args:
    #       buildno:1
    #       gitcommithash: cdc3b19
    # or
    #
    # build:
    #   context: ./dir
    #   args:
    #       - buildno:1
    #       - gitcommithash: cdc3b19
    #

    # NOTE
    # - YAML boolean values ( "true","false","yes","no","on","off" ) must be enclosed in
    # quotes, so that the parser interprets them as strings


    # cache_from
    # After version 3.2
    # A list of images that the engine uses for cache resolution
    # 
    # build:
    #   context: ./dir
    #   cache_from:
    #       - nginx:latest
    #       - corp/web_app:3.14

    # labels
    # After version 3.3
    # It's recommended that you use reverse-DNS notation to prevent your labels from 
    # conflicting with those used by other software
    # build:
    #   context: ./dir
    #   labels:
    #       - "com.example.description=Accounting App"
    #       - "com.example.tool=Patrioticv1"
    #       - "com.example.empty.label"
     
    # network
    # After version 3.4
    # Set the network containers connect to for the RUN instructions during build.
    # build:
    #   context: ./dir
    #   network: host ( or custom_network, none to disable networking during build)

    # shm_size -> shared memory size
    # After version 3.5
    # Set the size of the /dev/shm partition for this build's containers.
    # build:
    #   context: ./dir
    #   shm_size: '3gb'
    
    # cap_add, cap_drop
    # Add drop container capabilities, ( bash: man 7 capabilities for detailed info)
    # cap_add and cap_drop options are ignored in deployment stage
    # cap_add:
    #   - ALL
    # cap_drop:
    #   - NET_ADMIN
    #   - SYS_ADMIN
    
    # command
    # Override default command
    # command: bundle exec thin -p 3000
    # command: ["bundle","exec","thin","-p","3000"]

    # configs / short syntax --> version 3.3+
    # version: "3.9"
    # services:
    #   redis:
    #       image: redis:latest
    #       deploy:
    #           replicas:1
    #       configs:
    #           - webconfig
    #           - dbconfig
    #           - sshconfig
    # configs:
    #   webconfig:
    #       file: ./web.config
    #   dbconfig:
    #       file: ./db.config
    #   sshconfig:
    #       external: true

    # configs / long syntax --> providing more detailed info
    # source: the identifier of the config as it's defined in this configuration
    # target: the path and the name of the file to be mounted in the service's task container; 
    #   defaults to /<source> if not specified, copying config file from local to container's mount.
    # uid and gid: only on linux, 0 if not specified
    # mode: permissions for the file that is mounted whitin the service's task containers,
    #   in octal notation ; 0444 by default --> check unix permission calculator
    #
    #   rwx -> 111 -> 4+2+1 --> 7 ; ___:r__:r__:r__ --> 0444
    #   (special)_uid_gid_stickybit:(user)_read_write_execute:(group)_r_w_e:(other)_r_w_e
    #
    # version: "3.4"
    # services:
    #   redis:
    #       image: redis:latest
    #       deploy:
    #           replicas:2
    #       configs:
    #           - source: cache_config
    #             target: /redis_config
    #             uid: '101'
    #             gid: '102'
    #             mode: 0440
    # configs:
    #   cache_config:
    #       file: ./custom_redis_config.txt
    #   external_source:
    #       external: true
    #
    

    # container_name: my_container 
    # Docker containers must have unique names,
    # if you define a name for a service you can't scale it more than 1 service.

     
    # depends_on
    # Defines dependency between services.
    # - docker-compose up starts services in dependency order, in the example below "db" and "redis",
    # are started before web.
    # - docker-compose up SERVICE automatically includes SERVICE's dependencies.
    # - docker-compose up web also creates and starts "db" and "redis"
    # - docker-compose stop stops services in dependency order,
    # in example "web" is stopped before "db" and "redis"
    #
    # version: "3.8"
    # services:
    #   web:
    #       build: .
    #       depends_on:
    #           - db
    #           - redis
    #   redis:
    #       image: redis
    #   db:
    #       image: postgres
    #
    # NOTE
    # - depends_on doesn't wait for db and redis to be "ready" before starting web only until
    # they have been started. if you need to wait for a service to be ready,
    # it's ignored in deployments stage
    #
    # version= "2"
    # services:
    #   web:
    #       build: .
    #       ports:
    #           - "80:8000"
    #       depends_on:
    #           - "db"
    #       command: [ "./wait-for-it.sh","db:5432","--","python","app.py"]
    #   db:
    #       image: postgres
   

    # Restriction of Resources, per container, not available to v3 
    # version: "2.3"
    # services:
    #   web:
    #       build: ./
    #       dockerfile: ./dev.Dockerfile
    #
    #       cpu_count: 2
    #       cpu_percent: 50
    #       cpus: 0.5
    #       cpu_shares: 73
    #       cpu_quota: 50000
    #       cpu_period: 20ms
    #       cpuset: 0,1
    #       domainname: foo.com
    #       hostname: foo
    #       ipc: host
    #       mac_address: <mac>
    #
    #       mem_limit: 1000000000
    #       memswap_limit: 2000000000
    #       mem_reservation: 512m
    #       priviledged: true
    #
    #       oom_score_adj:500
    #       oom_kill_disable: true
    #
    #       read_only: true
    #       shm_size: 100M
    #       stdin_open: true
    #       tty: true


    # dns
    # Custom DNS servers
    # dns: 8.8.8.8
    #
    # or a list 
    # dns:
    #  - 8.8.8.8
    #  - 8.8.4.4
    #  - 1.1.1.1
    #  - 1.0.0.1


    # entrypoint
    # Override the default entrypoint
    # entrypoint: /path/quickstart.sh
    #
    # or a list
    # entrypoint: ["php","-d","memory_limit=-1","vendor/bin/phpunit"]
    #
    # NOTE
    # - Setting entrypoint both overrides any default entrypoint set on the service's image with
    # the ENTRYPOINT Dockerfile instruction and clears out any default on the image
    # meaning that if there's a CMD instruction in the Dockerfile, it's ignored


    # env_file
    # Add environment variables from a file, can be a single value or a list
    # 
    # NOTE
    # - if you've specified a Compose file with docker-compose -f FILE, paths in env_file
    # are relative to the directory that file is in.
    # 
    # env_file: .env
    #
    # env_file:
    #   - ./common.env
    #   - ./apps/web.env
    #   - ./opt/runtime_opts.env
    #
    # docker-compose expects each line in an .env file to be in VAR=VAL format,
    # lines beginning with # are treated as comments and are ignored; blank lines are also ignored!
    # 
    # .env file:
    # # example environment list
    # APP_PATH=/dotnet/aspnet/webapp.dll
    # VERSION=1.2.4
    # ENVIRONMENT=development
    # 
    # NOTE
    # - If your service specifies a build option, variables defined in environment files
    # are not automatically visible during the build.
    # - Use the args sub-option of build to define build-time environment variables. 
    #
    # NOTE
    # - The value of VAL is ued as is and not modified at all, for example if the value
    # is surrounded by quotes, the quotes are included in the value passed to Compose.
    # - Keep in mind that the order of files in the list is signigicant in determining the value
    # assigned to a variable that shows up more than once.
    # 
    # docker-compose.yml
    # services:
    #   web:
    #       env_file:
    #           - dev.env
    #           - test.env
    #
    # --------------------
    #
    # dev.env
    # VAR=1
    #
    # test.env
    # VAR=2
    #
    # $VAR will be 2


    # environment
    # Add environment variables, either an array or a dictionary, any boolean values
    # (true,false,yes,no) need to be enclosed in quotes to ensure they're not converted to
    # True or False by the YML parser.
    #
    # Environment variables with only a key are resolved to their values on the machine Compose 
    # is running on, which is a nice help to store secrets and host-specific values temporarily.
    # (just like ARG in Dockerfile)
    #
    # environment:
    #   RACK_ENV: development
    #   SHOW: 'true'
    #   SESSION_SECRET:
    #
    # environment:
    #   - RACK_ENV=development
    #   - SHOW=true
    #   - SESSION_SECRET
    #
    # NOTE
    # - If your service specifies a build option, variables defined in environment files
    # are not automatically visible during the build.
    # - Use the args sub-option of build to define build-time environment variables. 
    

    # expose
    # Expose ports without publishing them to the host machine, a mere metadata which shows
    # the purpose of a service. (22 SSH, 80/443 Web, 6379 Redis 1433 TSQL)
    # 
    # expose:
    #   - "8080"
    #   - "6379"


    # extra_hosts
    # Add hostname mappings, use the same values as the docker client --add-host param.
    #
    # extra_hosts:
    #   - "localhost: 127.0.0.1"
    #   - "dns.cloudflare: 1.1.1.1"
    # 
    # an entry with the ip address and hostname is created in /etc/hosts inside containers 
    # for this service.
    #
    # /etc/hosts:
    #
    # 127.0.0.1     localhost
    # 1.1.1.1       dns.cloudflare
   

    # healthcheck
    # Configure a check that's run to determine whether or not containers for this service are
    # healthy.
    #
    # healthcheck:
    #   test: ["CMD","curl","-f","https://localhost"]
    #   internal: 1m30s
    #   timeout: 10s
    #   retries: 3
    #   start_period: 40s
    #
    # NOTE
    # - The start_period option was added in file format 3.4
    # - To disable any default healthcheck set by the image, you can use disable:true,
    # this is same as "test:["NONE"]"
    #
    # healthcheck:
    #   disable: true
    #
    #
    # version: "3.4"
    # services:
    #   web-app:
    #       image: sabitk/web-go-app
    #       ports:
    #           - 80:80
    #       volumes:
    #           -/tmp:/usr/share/app/html
    #       deploy:
    #           replicas: 20
    #       healthcheck:
    #           test: ["CMD","curl","-f","https://crushpod.com"]
    #           interval: 2m
    #           timeout: 2s
    #           retries: 3
    #           start_period: 10s  --> this should be more than container's startup time!



    # image
    # Specift the image to start the container from, either a repository/tag or partial image ID
    # If the image doesn't exist on local docker host it will pull it from remote machine.
    #
    # image: redis
    # or
    # image: ubuntu:18.04
    # or
    # image: tutum/influxdb
    # or
    # image: registry/user/repository:tag
    # or
    # image: k422dk35


    # init
    # Added in version 3.7 file format
    # Run an init inside the container that forwards signals and reaps processes,
    # set it to true to enable.
    #
    # version: '3.8'
    # services:
    #   web:
    #       image: alpine:latest
    #       init: true
    

    # labels
    # Add metadata to containers, it can be an array or a dictionary
    #
    # NOTE
    # - it's recommended that you use reverse-DNS notation to prevent your lables from conflicting
    # with those used by other software
    #
    # labels:
    #   com.example.description: "Web API"
    #   com.example.department: "HR"
    #  
    # labels:
    #   - "com.example.description: Web API"
    #   - "com.example.department: HR"
    

    # logging
    # Logging configuration for the service
    #
    # logging:
    #   driver: syslog
    #   options:
    #       syslog-address: "tcp://192.168.1.1:136"
    # 
    # The driver name specifies a logging driver for the service's containers, as with the
    # --log-driver option for docker run
    #
    # The default value is json-file
    # driver: "json-file"
    # 
    # driver: "syslog" or driver: "none"
    #
    # NOTE
    # - Only the json-file and journald drivers make the logs available directly from
    # docker-compose up and dcoker-compose logs, using the others doesn't pring any logs!
    #
    # The default driver json-file has options to limit the amount of logs stored.
    # Use a key-value pair for max storage size max number of files
    #
    # options:
    #   max-size: "200k"
    #   max-file: "20"
    #


    # network_mode
    # Same as --network on docker run
    #
    # network_mode: "bridge" or "host" or "none" or "service:[service name]"
    # or
    # network_mode: "container:[container name/id]"


    # networks
    #
    # version: "3.9"
    #
    # services:
    #   web:
    #       image: "nginx:alpine"
    #       networks:
    #           - new
    #
    #   worker:
    #       image: "my-worker-image:latest"
    #       networks:
    #           - legacy
    #
    #   db:
    #       image: mysql
    #       networks:
    #           new:
    #               aliases:
    #                   - database
    #           legacy:
    #               aliases:
    #                   - mysql
    # 
    # networks:
    #   new:
    #   legacy:
    #


    # ipv4-ipv6 addresses
    #
    # version: "3.9"
    #
    # services:
    #   app:
    #       image: nginx:alpine
    #       networks:
    #           app_net:
    #               ipv4_address: 172.16.238.10
    #               ipv6_address: 2001:3984:3989::10
    #
    # networks:
    #   app_net:
    #       ipam:
    #       driver: default
    #       config:
    #           - subnet: "172.16.238.0/24
    #           - subnet: "2001:3984:3989::/64
    #           - gateway: "172.16.238.1"


    # ports
    # Expose ports
    # 
    # NOTE
    # - Port mapping is incompatible with network_mode: host
    # - docker-compose run ignores ports unless you include --service-ports.
    #
    # SHORT SYNTAX
    # - Specify both ports ( HOST:CONTAINER)
    # - Specify just the container port ( an ephemeral host port is chosen for the host port)
    # (:CONTAINER)
    # - Specify the host IP address to bind to AND both ports (the default is 0.0.0.0, meaning
    # all interfaces). ( IPADDR:HOSTPORT:CONTAINERPORT)
    # - if HOSTPORT is empty ( 127.0.0.1::80), an ephemeral port is chosen to bind to on the host.
    # 
    # NOTE
    # - It's recommended to specify your port mappings as strings
    #
    # ports:
    #   - "3000"
    #   - "3000-3005"
    #   - "8000:8000"
    #   - "9090-9095:8080-8085"
    #   - "49100:22"
    #   - "127.0.0.1:8001:8001"
    #   - "127.0.0.1:5000-5010:5000-5010"
    #   - "127.0.0.1::5000"
    #   - "6060:6060/udp"
    #   - "12400-12500:1240"
    #
    # LONG SYNTAX
    # This syntax is new in the v3.2
    #
    # - target: the port in the container
    # - published: the publicly exposed port
    # - protocol: the port protocol (tcp/udp)
    # - mode: host for publishing a host port on each node or ingress for a swarm mode port
    # to be load balanced
    #
    # ports:
    #   - target: 80
    #     published: 8080
    #     protocol: tcp
    #     mode: host


    # restart
    # - no: the default restart policy and it doesn't restart a container under any circumstance.
    # - always: the container always restarts
    # - on-failure: restart a container if the exit code indicates an on-failure error.
    # - unless-stopped: always restarts a container except when the container is stopped.
    # 
    # NOTE
    # it's ignored in swarm
    

    # secrets
    #
    # SHORT SYNTAX
    # - The short syntax variant only specifies the secret name, this grants the container access to
    # the secret and mounts it at "/run/secrets/<secret-name>" within the container.
    # - The source name and destination mountpoint are both set to the secret name.
    #
    # version: "3.9"
    #
    # services:
    #   redis:
    #       image: redis:latest
    #       deploy:
    #           replicas: 1
    #       secrets:
    #           - my_secret
    #           - my_other_secret
    # 
    # secrets:
    #   my_secret:
    #       file: ./my_secret_file.txt
    #   my_other_secret:
    #       external: true
    #
    #
    # LONG SYNTAX
    #
    # - source: the identifier of the secret as it's defined in the configuration 
    # - target: the name of the file to be mounted in "/run/secrets/" in the service's
    # task container; defaults to source if not specified.
    # - uid and gid: the numeric uid or gid that owns the file withing "/run/secrets/"
    # in the service's task containers; both dafault to 0 if left blank.
    # - mode: the permissions (chmod) for the file to be mounted in "/run/secrets/",
    # in octal notation ( 0444 )
    #
    # version: "3.9"
    #
    # services:
    #   redis:
    #       image: redis:latest
    #       deploy:
    #           replicas: 1
    #       secrets:
    #           - source: custom_secrets
    #             target: redis_secrets
    #             uid: '102'
    #             gid: '103'
    #             mode: 0440
    #
    # secrets:
    #  custom_secrets:
    #       file: ./custom_keys.txt
    #  other_secrets:
    #       external: true
    

    
    # stop_signal
    # Set an alternative signal to stop the container, by default stop uses SIGTERM.
    #
    # stop_signal: SIGUSR1 or SIGKILL
    

    # sysctls
    # Kernel parameters to set in the container, an array or a dictionary
    #
    # sysctls:
    #   net.core.somaxconn: 1024
    #   net.ipv4.txp_syncookies: 0
    # 
    # sysctls:
    #   - net.core.somaxconn=1024
    #   - net.ipv4.tcp_syncookies=0


    # tmpfs
    # Added v3.6
    # Mount a temp file system inside the container, a single value or a list.
    #
    # tmpfs: /run
    #
    # tmpfs:
    #   - /run
    #   - /tmp
    


    # volume
    #
    # version: "3.9"
    # services:
    #   web:
    #       image: nginx:alpine
    #       volumes:
    #           - type: volume
    #             source: app_volume
    #             target: /app
    #             volume:
    #               nocopy: true
    #           - type: bind
    #             source: ./static
    #             target: /opt/app/static
    #
    #   db:
    #       image: postgres:latest
    #       volumes:
    #           - "/var/run/postgres/postgres.sock:/var/run/postgres/postgres.sock"
    #           - "dbdata:/var/lib/postgresql/data"
    #
    # volumes:
    #   mydata:
    #   dbdata:
    #
    # SHORT SYNTAX
    # - The short syntax uses the generic [SOURCE:]TARGET[:MODE] where SOURCE can be either a
    # host path or volume name.
    # - TARGET is the container path where the volume is mounted, standard modes are "no" for
    # read-only and "rw" for read-write (default)
    #
    # volumes:
    #   - /var/lib/sql  --> define a path and let the Engine create a volume
    #   - /opt/data:/var/lib/sql  --> binding data on host to sql on container
    #   - ./cache:/tmp/cache --> . relative to the Compose file
    #   - ~/configs:/etc/configs/:ro --> user-relative path
    #   - sshvolume:/var/lib/mysql  --> named volume
    #
    # LONG SYNTAX
    # Added in v3.2
    #
    # - type: mount type volume,bind,tmpfs,npipe
    # - source: a path on the host for a bind mount, or the name of a volume (not for tmpfs)
    # - target: the path in the container where the volume is mounted
    # - read_only: flag to set read-only :ro
    # - bind: configure additional bind options
    #       propagation: it's default mode for bind
    # - volume: configure additional volume options
    #       nocopy: flag to disable copying of data from a container when a volume is created
    # - tmpfs: configure additional tmpfs options
    #       size: size for the tmpfs mount in bytes
    #
    # version: "3.9"
    # services:
    #   web:
    #       image: nginx:lateset
    #       ports:
    #           - "80:80"
    #       networks:
    #           webnet:
    #               ipv4_address: 172.20.0.5
    #       volumes:
    #           - type: volume
    #             source: test_volume
    #             target: /app
    #             volume:
    #               nocopy: true
    #           - type: bind
    #             source: ./static
    #             target: /opt/app/static
    #
    # networks:
    #   webnet:
    #      driver: bridge
    #      ipam:
    #       driver: default
    #       config:
    #           - subnet: 172.20.0.0/16
    #             gateway: 172.20.0.1
    # volumes:
    #   test_volume:
    #       driver_opts:
    #           type: "dfs"
    #           o: "addr=172.20.0.5,nolock,soft,rw"
    #           device: ":/docker/example" 


    # driver_opts
    # Define a list of options as key-value pairs to pass to the driver for this volume.
    # Those options are driver-dependent.
    #
    # volumes:
    #   test_volume:
    #       driver_opts:
    #           type: "dfs"
    #           o: "addr=172.20.0.5,nolock,soft,rw"
    #           device: ":/docker/example"
    

    # external
    # If set to true, specifies that the volume has been created outside of Compose,
    # docker-compose up doesn't attempt to create it and raises an error if it doesn't exist.
    # Some limitations have been removed after v3.4      
    #
    # version: "3.9"
    # services:
    #   db:
    #       image: postgres
    #       volumes:
    #           - pgrsql:/var/lib/postgresql/data
    #
    # volumes:
    #   pgrsql:
    #       external: true
    #       name: postgesql_volume_20GB
    #
    # NOTE
    # external.name was deprecated in v3.4 ,use name instead.
    

    # driver
    # - Specify which driver should be ussed for this network
    # - The default driver depends on how the Docker Engine is configured, mostly it's bridge and
    # overlay on a Swarm
    #
    # driver: overlay


    # host or none
    # Use the host's networking stack or no networking
    # 
    # version: "3.9"
    # services:
    #   web:
    #     networks:
    #       hostnet: {} --> or nonet: {}
    #
    # networks:
    #   hostnet:
    #     external: true
    #     name: host
    #   nonet:
    #     external: true
    #     name: none 


    # attachable
    # Added in v3.2
    # 
    # - Only used when the driver is set to overlay, if set to true then standalone containers can
    # attach to this network in addition to services.
    # - If a standalone container attaches to an overlay network, it can communicate with services
    # and standalone containers that are also attached to the overlay network from other Docker Deamons
    #
    # networks:
    #   net1:
    #     driver: overlay
    #     attachable: true


    # ipam
    # Specify custom IPAM config, an object with several properties, each of which is optional.
    #
    # - driver: Custom IPAM driver, instead of default
    # - config: A list of config blocks
    #       subnet: Subnet in CIDR format that represents a network segment
    #
    # ipam:
    #   driver: default
    #   config:
    #     - subnet: 192.168.0.0/16
    #
    # NOTE
    # - Additional IPAM configurations such as "gateway" are only honored for version 2.
    


    # network / external
    # - If set to true, defines that the network has been created outside of Compose,
    # docker-compose up doesn't atempy to create it.
    # In v3.4 and above.
    #
    # version: "3.9"
    #
    # services:
    #   proxy:
    #     build: ./proxy
    #     networks:
    #       - outside
    #       - default
    #   app:
    #     build: ./app
    #     networks:
    #       - default
    #
    # networks:
    #   outside:
    #     external: true
    #     name: actual-name-of-network
    

    # configs and configuration reference
    # - The top-level configs declaration defines or references configs that can be granted to
    # the services in the stack.
    # - The source of the config is either file or external.
    #
    # - file: the config is created with the contents of the file at the specified path.
    # - external: If set to true, defines that config has already been created, docker doesn't
    # attempt to create it.
    # - name: the name of config object in Docker. in v3.5
    # - driver and driver-opt: the name of custom secret driver and driver specific options passed
    # as key-value pairs. in v3.8
    # 
    # configs:
    #   first_config:
    #     file: ./config_data
    #   second_config:
    #     external:
    #       name: redis_config
    # 
    # secrets:
    #   first_secret:
    #     file: ./secret_data
    #   second_secret:
    #     external: true
    #     name: redis_secret


    # variable substitution
    # Your configuration options can contain environment variables, Compose uses the variable values
    # from the shell environment in which docker-compose is run.
    #
    # db:
    #   image: "postgres:${POSTGRES_VERSION:-latest} --> ${POSTGRES_VERSION:?err} 
    #   env_file: ./postgres.env


    # NOTE
    # if you want to type a "$" use "$$" 
    # 
    # web:
    #   build: .
    #   command: "$$VAR_NOT_INTERPOLATED_BY_COMPOSE"
    
            
    # NOTE
    # Docker Swarm Notes
    #
    # Labels on nodes to pinpoint the worker nodes:
    #
    # docker node update --label-add west=turkey [node1[:node id]]
    # docker node update --label-add west=turkey [node2[:node id]]
    #
    # Configuration:
    #
    # docker config create web_dev.conf(naming config file) ./d.conf(file on host machine)
    # docker service create --name web --config src=web_dev.conf,target=/tmp/dev.conf
    #
    # docker service update --config-add src=web_perf.conf,target=/tmp/perf.conf \
    # -p 80:80 nginx:latest
     
